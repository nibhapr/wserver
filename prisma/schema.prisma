generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model autoreplies {
  id         BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt           @db.UnsignedBigInt
  device     String           @db.VarChar(20)
  keyword    String           @db.VarChar(255)
  type       autoreplies_type
  reply      String           @db.LongText
  created_at DateTime?        @db.Timestamp(0)
  updated_at DateTime?        @db.Timestamp(0)
}

model blasts {
  id          BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt        @db.UnsignedBigInt
  sender      String        @db.VarChar(255)
  campaign_id BigInt        @db.UnsignedBigInt
  receiver    String        @db.VarChar(255)
  message     String        @db.LongText
  type        blasts_type
  status      blasts_status
  created_at  DateTime?     @db.Timestamp(0)
  updated_at  DateTime?     @db.Timestamp(0)
  campaigns   campaigns     @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blasts_campaign_id_foreign")
  users       users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blasts_user_id_foreign")

  @@index([campaign_id], map: "blasts_campaign_id_foreign")
  @@index([user_id], map: "blasts_user_id_foreign")
}

model campaigns {
  id         BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt           @db.UnsignedBigInt
  sender     String           @db.VarChar(255)
  name       String           @db.VarChar(255)
  tag        String           @db.VarChar(255)
  type       String           @db.VarChar(255)
  status     campaigns_status @default(waiting)
  message    String           @db.LongText
  schedule   DateTime?        @db.DateTime(0)
  created_at DateTime?        @db.Timestamp(0)
  updated_at DateTime?        @db.Timestamp(0)
  blasts     blasts[]
  users      users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "campaigns_user_id_foreign")

  @@index([user_id], map: "campaigns_user_id_foreign")
}

model contacts {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  tag_id     BigInt    @db.UnsignedBigInt
  name       String?   @db.VarChar(255)
  number     String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  tags       tags      @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "contacts_tag_id_foreign")

  @@index([tag_id], map: "contacts_tag_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model numbers {
  id            BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  user_id       BigInt         @db.UnsignedBigInt
  body          String         @db.VarChar(255)
  webhook       String?        @db.VarChar(255)
  messages_sent Int            @default(0)
  status        numbers_status
  created_at    DateTime?      @db.Timestamp(0)
  updated_at    DateTime?      @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model schedules {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  type       String    @db.VarChar(255)
  sender     String    @db.VarChar(255)
  numbers    String    @db.LongText
  text       String    @db.Text
  media      String?   @db.VarChar(255)
  footer     String?   @db.VarChar(255)
  button1    String?   @db.VarChar(255)
  button2    String?   @db.VarChar(255)
  datetime   DateTime  @db.DateTime(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model tags {
  id         BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt     @db.UnsignedBigInt
  name       String     @db.VarChar(255)
  created_at DateTime?  @db.Timestamp(0)
  updated_at DateTime?  @db.Timestamp(0)
  contacts   contacts[]
}

model users {
  id                   BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  username             String                    @db.VarChar(255)
  email                String                    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at    DateTime?                 @db.Timestamp(0)
  password             String                    @db.VarChar(255)
  api_key              String                    @db.VarChar(255)
  chunk_blast          Int
  level                users_level               @default(user)
  status               users_status              @default(active)
  limit_device         Int                       @default(0)
  active_subscription  users_active_subscription @default(inactive)
  subscription_expired DateTime?                 @db.DateTime(0)
  remember_token       String?                   @db.VarChar(100)
  created_at           DateTime?                 @db.Timestamp(0)
  updated_at           DateTime?                 @db.Timestamp(0)
  blasts               blasts[]
  campaigns            campaigns[]
}

enum autoreplies_type {
  text
  image
  button
  template
  list
}

enum numbers_status {
  Connected
  Disconnect
}

enum blasts_type {
  text
  button
  image
  template
  list
}

enum campaigns_status {
  waiting
  executed
  failed
}

enum blasts_status {
  failed
  success
  pending
}

enum users_level {
  admin
  user
}

enum users_status {
  active
  inactive
}

enum users_active_subscription {
  inactive
  active
  lifetime
  trial
}
